pipeline {
    agent any //{ label 'master' }
    options {
      timestamps()
    }
    stages {
        stage('Test branches from feature to develop') {
            agent {label 'master'}
            when {
                // Only say hello if a "greeting" is requested
                expression { CHANGE_ID != null && CHANGE_BRANCH ==~ /^feature.*/ && CHANGE_TARGET != "develop"}
            }
            steps {
               sh 'exit 1'   
            }
        }
        stage ('SonarQube code test') {
            agent {label 'master'}
            environment {
                scannerHome = tool 'SonarScanner'
            }
            steps {
                withSonarQubeEnv(installationName: 'SonarQube', credentialsId: 'SonarToken') {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${CHANGE_BRANCH}  -Dsonar.projectName=\'${CHANGE_BRANCH}\'"
                }
                timeout(time: 5, unit: 'MINUTES') {
                   waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Run Slave') {
        agent {label 'Ruby'}
            steps {
                 sh("printenv")
            }
        }
        stage('Running ansible playbook') {
            agent {
                label 'master'
            }
            steps {
               sh "ansible-playbook"
            }
        }
        stage('Test HTTP Server') {
            agent {
                label 'master'
            }
            steps {
               sh "ansible-playbook"
               sh "test http"
            }
        }
        stage('Run RSpec tests') {
            agent {
                label 'Ruby'
            }
            steps {
               sh "rspec"
            }
        }
    }
}
